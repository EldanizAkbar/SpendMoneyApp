{"ast":null,"code":"const moneyFormat = money => {\n  return money.toLocaleString();\n};\n\nexport { moneyFormat }; // Create our number formatter.\n\nvar formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD' // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n\n});\nformatter.format(2500);\n/* $2,500.00 */\n\nfunction numFormatter(money) {\n  if (money > 999 && money < 1000000) {\n    return money / 1000 + 'K'; // convert to K for moneyber from > 1000 < 1 million \n  } else if (money > 1000000 && money < 1000000000) {\n    return money / 1000000 + 'M'; // convert to M for moneyber from > 1 million \n  } else if (money > 1000000000) {\n    return money / 1000000000 + 'b';\n  } else if (money < 900) {\n    return money; // if value < 1000, nothing to do\n  }\n}\n\nexport { numFormatter };","map":{"version":3,"sources":["C:/Users/elden/Desktop/Spend Money/spend-money/src/components/format.js"],"names":["moneyFormat","money","toLocaleString","formatter","Intl","NumberFormat","style","currency","format","numFormatter"],"mappings":"AAAA,MAAMA,WAAW,GAAIC,KAAD,IAAW;AAC9B,SAAOA,KAAK,CAACC,cAAN,EAAP;AACA,CAFD;;AAGA,SAAQF,WAAR,G,CAEA;;AACA,IAAIG,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAC3CC,EAAAA,KAAK,EAAE,UADoC;AAE3CC,EAAAA,QAAQ,EAAE,KAFiC,CAI3C;AACA;AACA;;AAN2C,CAA/B,CAAhB;AASAJ,SAAS,CAACK,MAAV,CAAiB,IAAjB;AAAwB;;AAIxB,SAASC,YAAT,CAAsBR,KAAtB,EAA6B;AACzB,MAAGA,KAAK,GAAG,GAAR,IAAeA,KAAK,GAAG,OAA1B,EAAkC;AAC9B,WAAQA,KAAK,GAAC,IAAP,GAAc,GAArB,CAD8B,CACJ;AAC7B,GAFD,MAEM,IAAGA,KAAK,GAAG,OAAR,IAAmBA,KAAK,GAAG,UAA9B,EAA0C;AAC5C,WAAQA,KAAK,GAAC,OAAP,GAAkB,GAAzB,CAD4C,CACd;AACjC,GAFK,MAEA,IAAGA,KAAK,GAAG,UAAX,EAAsB;AACxB,WAAQA,KAAK,GAAC,UAAP,GAAqB,GAA5B;AACN,GAFQ,MAEH,IAAGA,KAAK,GAAG,GAAX,EAAe;AACd,WAAOA,KAAP,CADc,CACA;AACjB;AACJ;;AACD,SAAQQ,YAAR","sourcesContent":["const moneyFormat = (money) => {\r\n\treturn money.toLocaleString()\r\n}\r\nexport {moneyFormat}\r\n\r\n// Create our number formatter.\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n  });\r\n  \r\nformatter.format(2500); /* $2,500.00 */\r\n\r\n\r\n\r\nfunction numFormatter(money) {\r\n    if(money > 999 && money < 1000000){\r\n        return (money/1000)+ 'K'; // convert to K for moneyber from > 1000 < 1 million \r\n    }else if(money > 1000000 && money < 1000000000 ){\r\n        return (money/1000000) + 'M'; // convert to M for moneyber from > 1 million \r\n    }else if(money > 1000000000){\r\n        return (money/1000000000) + 'b';\r\n\t}else if(money < 900){\r\n        return money; // if value < 1000, nothing to do\r\n    }\r\n}\r\nexport {numFormatter}"]},"metadata":{},"sourceType":"module"}